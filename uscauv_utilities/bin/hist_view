#!/usr/bin/env python

import roslib
roslib.load_manifest('uscauv_utilities')
import cv2
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
import sys

class hist_viewer:

  def __init__(self):
    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("image", Image, self.callback)
    self.bins = np.arange(256).reshape(256,1)
    self.gray_supported = ["mono8", "mono16"]
    self.bgr_supported = ["bgr8", "bgr16", "bgra8", "bgra16", "rgb8", "rgb16", "rgba8", "rgba16" ]

  def callback(self,msg):
    try:
        if msg.encoding in self.gray_supported:
            cv_image = np.asarray(self.bridge.imgmsg_to_cv(msg, "mono8"))
        elif msg.encoding in self.bgr_supported:
            cv_image = np.asarray(self.bridge.imgmsg_to_cv(msg, "bgr8"))
        else:
            print 'Unsupported encoding: [ ', msg.encoding, ' ].'
            return
        
    except CvBridgeError, e:
        print e
        return

    if not hasattr(self, 'window_name'):
        self.window_name = rospy.resolve_name('image')
        cv2.namedWindow(self.window_name)

    curve = self.hist_curve(cv_image)
    cv2.imshow(self.window_name, curve)
    cv2.waitKey(2)
    
  def hist_curve(self,im):
    h = np.zeros((300,256,3))
    if len(im.shape) == 2:
        color = [(255,255,255)]
    elif im.shape[2] == 3:
        color = [ (255,0,0),(0,255,0),(0,0,255) ]
    for ch, col in enumerate(color):
        hist_item = cv2.calcHist([im],[ch],None,[256],[0,256])
        cv2.normalize(hist_item,hist_item,0,255,cv2.NORM_MINMAX)
        hist=np.int32(np.around(hist_item))
        pts = np.int32(np.column_stack((self.bins,hist)))
        cv2.polylines(h,[pts],False,col)
    y=np.flipud(h)
    return y
    

def main(args):
  hv = hist_viewer()
  rospy.init_node('hist_view', anonymous=True)
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print "Shutting down"
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
