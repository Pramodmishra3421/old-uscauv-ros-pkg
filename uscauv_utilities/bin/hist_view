#!/usr/bin/env python
###########################################################################
#  hist_view
#  --------------------
#
#  Copyright (c) 2013, Dylan Foster (turtlecannon@gmail.com)
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  # Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  # Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  # Neither the name of USC AUV nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import roslib
roslib.load_manifest('uscauv_utilities')
import cv2
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
import sys
import matplotlib.pyplot as plt
import inspect

class hist_viewer:

  def __init__(self):
    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("image", Image, self.callback)
    self.bins = np.arange(256).reshape(256,1)
    self.gray_supported = ["mono8", "mono16"]
    self.bgr_supported = ["bgr8", "bgr16", "bgra8", "bgra16", "rgb8", "rgb16", "rgba8", "rgba16" ]

  def callback(self,msg):
    try:
        if msg.encoding in self.gray_supported:
            im = np.asarray(self.bridge.imgmsg_to_cv(msg, "mono8"))
        elif msg.encoding in self.bgr_supported:
            im = np.asarray(self.bridge.imgmsg_to_cv(msg, "bgr8"))
        else:
            print 'Unsupported encoding: [ ', msg.encoding, ' ].'
            return
        
    except CvBridgeError, e:
        print e
        return

    if not hasattr(self, 'window_name'):
      # Get the remapped name of the image topic and use it to name the window
        self.window_name = rospy.resolve_name('image')
        plt.ion()
        plt.show()
        fig = plt.figure()
        fig.canvas.set_window_title( self.window_name )
        self.lines = plt.plot([], [], [], [], [], [])
        self.ax = plt.gca()
        self.xrange = range(256) # Image data is 8-bit -> 256 bins

    if len(im.shape) == 2:
        color = [(0, 0, 0)]
    elif im.shape[2] == 3:
        color = [ (1,0,0),(0,1,0),(0,0,1) ]
    for ch, col in enumerate(color):
        hist_item = cv2.calcHist([im],[ch],None,[256],[0,256])
        self.lines[ch].set_xdata( self.xrange )
        self.lines[ch].set_ydata( hist_item )
        self.lines[ch].set_color( col )

    # Autoscale the plot axes to support the updated data
    self.ax.relim()
    self.ax.autoscale_view()
    # Redraw the histogram
    plt.draw()
    

def main(args):
  hv = hist_viewer()
  rospy.init_node('hist_view', anonymous=True)
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print "Shutting down"

if __name__ == '__main__':
    main(sys.argv)
